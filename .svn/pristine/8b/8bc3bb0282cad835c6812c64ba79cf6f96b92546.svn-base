package com.efun.mainland.util.core;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Pointcut;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.efun.mainland.util.PropertiesCacheUtil;

/**
 * 性能监控<br/>
 * 默认切入点配置：execution(* com.efun.controller..*(..))
 * 
 * @author Efun
 *
 */
public abstract class AbstractPerformanceAOP {
	protected static final Logger logger = LoggerFactory.getLogger(AbstractPerformanceAOP.class);

	@Pointcut(value = "execution(* com.efun.controller..*(..))")
	protected void pointCutMethod() {
	}

	abstract public String switchFile();

	@Around(value = "pointCutMethod()")
	public void around(ProceedingJoinPoint point) {
		String configValue = PropertiesCacheUtil.getValue("openPerformanceMonitor", switchFile());
		if ("0".equals(configValue)) {
			try {
				point.proceed();
			} catch (Throwable e) {
				logger.error("Throwable Message:" + e.getMessage(), e);
			}
		} else {
			long time = System.currentTimeMillis();
			Object target = point.getTarget();// 拦截的实体类
			String className = target.getClass().getName();
			String methodName = point.getSignature().getName();// 拦截的方法名称
			// Object[] args = point.getArgs();// 拦截的方法参数
			// Class<?>[] parameterTypes = ((MethodSignature)
			// point.getSignature())
			// .getMethod().getParameterTypes();// 拦截的方法参数类型
			//
			// Method m = null;
			//
			// try {
			// m = target.getClass().getMethod(methodName, parameterTypes);//
			// 通过反射获得拦截的method
			// m.invoke(methodName, args);
			// } catch (NoSuchMethodException e) {
			// // TODO Auto-generated catch block
			// e.printStackTrace();
			// } catch (SecurityException e) {
			// // TODO Auto-generated catch block
			// e.printStackTrace();
			// } catch (IllegalAccessException e) {
			// // TODO Auto-generated catch block
			// e.printStackTrace();
			// } catch (IllegalArgumentException e) {
			// // TODO Auto-generated catch block
			// e.printStackTrace();
			// } catch (InvocationTargetException e) {
			// // TODO Auto-generated catch block
			// e.printStackTrace();
			// }

			try {
				point.proceed();
			} catch (Throwable e) {
				logger.error("Throwable Message:" + e.getMessage(), e);
			}

			logger.info(new StringBuilder(200).append("currentThread:").append(Thread.currentThread().toString())
					.append(" class:").append(className).append(" method:").append(methodName).append(" time(ms):")
					.append((System.currentTimeMillis() - time)).toString());
		}
	}

	// @Before(value = "pointCutMethod()")
	// public void begin(JoinPoint point) {
	// String configValue=PropUtil.getString("openPerformanceMonitor");
	// isFlush =
	// "true".equals(configValue)?true:("false".equals(configValue)?false:open);
	// if (isFlush) {
	// time = System.currentTimeMillis();
	// Object target = point.getTarget();// 拦截的实体类
	// className = target.getClass().getName();
	// methodName = point.getSignature().getName();// 拦截的方法名称
	// // Object[] args = point.getArgs();// 拦截的方法参数
	// // Class<?>[] parameterTypes = ((MethodSignature)
	// // point.getSignature())
	// // .getMethod().getParameterTypes();// 拦截的方法参数类型
	// //
	// // Method m = null;
	// //
	// // try {
	// // m = target.getClass().getMethod(methodName, parameterTypes);//
	// // 通过反射获得拦截的method
	// // m.invoke(methodName, args);
	// // } catch (NoSuchMethodException e) {
	// // // TODO Auto-generated catch block
	// // e.printStackTrace();
	// // } catch (SecurityException e) {
	// // // TODO Auto-generated catch block
	// // e.printStackTrace();
	// // } catch (IllegalAccessException e) {
	// // // TODO Auto-generated catch block
	// // e.printStackTrace();
	// // } catch (IllegalArgumentException e) {
	// // // TODO Auto-generated catch block
	// // e.printStackTrace();
	// // } catch (InvocationTargetException e) {
	// // // TODO Auto-generated catch block
	// // e.printStackTrace();
	// // }
	// }
	// }
	//
	// @After(value = "pointCutMethod()")
	// public void end() {
	// if (isFlush) {
	// logger.info(new StringBuilder(200).append("currentThread:")
	// .append(Thread.currentThread().toString())
	// .append(" class:").append(className).append(" method:")
	// .append(methodName).append(" time(ms):")
	// .append((System.currentTimeMillis() - time)).toString());
	// }
	// }
}
