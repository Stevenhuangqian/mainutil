package com.efun.mainland.util.db;

import java.sql.Connection;
import java.sql.SQLException;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.jdbc.datasource.AbstractDataSource;

import com.efun.mainland.util.db.annotation.SelectDataBase;

public class DBDataSource extends AbstractDataSource implements InitializingBean {
	private static final Logger log = LoggerFactory.getLogger(DBDataSource.class);
	private SingleReadWriteSwitch defaultReadWriteSwitch;
	private Object readWriteSwitch;

	public void setDefaultReadWriteSwitch(SingleReadWriteSwitch defaultReadWriteSwitch) {
		this.defaultReadWriteSwitch = defaultReadWriteSwitch;
	}

	public void setReadWriteSwitch(Object readWriteSwitch) {
		if (readWriteSwitch instanceof SingleReadWriteSwitch) {
			this.readWriteSwitch = readWriteSwitch;
		} else if (readWriteSwitch instanceof MultiReadWriteSwitch) {
			this.readWriteSwitch = readWriteSwitch;
		} else {
			throw new IllegalArgumentException(
					"property 'readWriteSwitch' is required!SingleReadWriteSwitch?MultiReadWriteSwitch?");
		}
	}

	public void afterPropertiesSet() throws Exception {
		if (readWriteSwitch == null) {
			throw new IllegalArgumentException("property 'readWriteSwitch' is required");
		}
	}

	private DataSource determineDataSource() {
		SelectDataBase.DataBase database = DBDecision.get();
		if (database == null) {
			database = SelectDataBase.DataBase.DB_0;
			log.debug("no choice SelectDataBase.DataBase, default determine SelectDataBase.DataBase.DB_0");
		}
		SingleReadWriteSwitch srws = null;

		if (readWriteSwitch != null) {
			if (readWriteSwitch instanceof SingleReadWriteSwitch) {
				srws = (SingleReadWriteSwitch) readWriteSwitch;
			} else if (readWriteSwitch instanceof MultiReadWriteSwitch) {
				srws = ((MultiReadWriteSwitch) readWriteSwitch).getMultiReadWriteSwitchMap().get(database.toString());
			} else {
				throw new IllegalArgumentException(
						"property 'readWriteSwitch or defaultReadWriteSwitch' is required!SingleReadWriteSwitch?MultiReadWriteSwitch?SelectDataBase.DataBase="
								+ database);
			}
		} else {
			srws = defaultReadWriteSwitch;
		}

		if (srws != null) {
			log.debug("current Database={},readOnly={}",database,database.isReadOnly());
			return database.isReadOnly() ? srws.selectRead() : srws.selectWrite();
		} else {
			throw new IllegalArgumentException(
					"property 'readWriteSwitch or defaultReadWriteSwitch' is required!SingleReadWriteSwitch?MultiReadWriteSwitch?SelectDataBase.DataBase="
							+ database);
		}
	}

	public Connection getConnection() throws SQLException {
		return determineDataSource().getConnection();
	}

	public Connection getConnection(String username, String password) throws SQLException {
		return determineDataSource().getConnection(username, password);
	}

}
