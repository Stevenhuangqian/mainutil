package com.efun.mainland.util;

import com.efun.general.GeneralHelper;
import org.apache.log4j.Logger;

import javax.servlet.http.HttpServletRequest;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.Enumeration;

/**
 * 获取ip地址
 *
 * @author Administrator
 */
public class IpUtil {
    private static final Logger log = Logger.getLogger(IpUtil.class);

    /**
     * @param request IP
     * @return IP Address
     */
    public static final String getIpAddrByRequest(HttpServletRequest request) {
        return getIpAddr(request);
    }

    /**
     * @param request IP
     * @return IP Address
     */
    public static final String getIpAddr(HttpServletRequest request) {
        String ip = request.getHeader("X-Real-IP");

        String fix = getIpAddr(ip);
        if (fix != null) {
            if (fix.length() != 0) {
                ip = fix;
            } else {
                String ip1 = ip;
                ip = request.getHeader("X-Forwarded-For");
                fix = getIpAddr(ip);
                if (fix != null) {
                    if (fix.length() != 0) {
                        ip = fix;
                    } else {
                        if (ip1 == null) {
                            ip1 = ip;
                        }
                        ip = request.getHeader("Proxy-Client-IP");
                        fix = getIpAddr(ip);
                        if (fix != null) {
                            if (fix.length() != 0) {
                                ip = fix;
                            } else {
                                if (ip1 == null) {
                                    ip1 = ip;
                                }
                                ip = request.getHeader("WL-Proxy-Client-IP");
                                fix = getIpAddr(ip);
                                if (fix != null) {
                                    if (fix.length() != 0) {
                                        ip = fix;
                                    } else {
                                        if (ip1 == null) {
                                            ip1 = ip;
                                        }

                                        if (ip1 == null) {
                                            try {
                                                ip = getRealIp();
                                            } catch (Exception e) {
                                            } finally {
                                                if (ip == null || ip.length() == 0 || !GeneralHelper.isStrIPAddress(ip)) {
                                                    log.error(new StringBuilder("=====getIpAddr:error===== ip>>>").append(ip).toString());
                                                }
                                            }
                                        } else {
                                            ip = ip1;
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }

        }

        return ip;
    }

    /**
     * 修正ip<br/>
     * null:无需更改，""：需要更改，其他值表示修正后的ip
     *
     * @param ip
     * @return
     */
    private static final String getIpAddr(String ip) {
        // "unknown".equalsIgnoreCase(ip)替换为(ip.length()==7&&ip.indexOf(".")==-1)
        if (ip == null) {
            return "";
        } else {
            int length = ip.length();
            if (length < 7 || ip.indexOf(".") == -1) {
                return "";
            }
            if (ip.indexOf(",") == -1 && length <= 15) {
                if (ip.startsWith("172.") || ip.startsWith("192.") || ip.startsWith("10.")) {
                    return "";
                } else if (GeneralHelper.isStrIPAddress(ip)) {
                    return null;
                } else {
                    log.error(new StringBuilder("=====getIpAddr:error===== ip>>>").append(ip).toString());
                    return "";
                }
            } else {
                String[] ips = ip.split("\\,| ");
                for (String temp : ips) {
                    temp = temp.trim();
                    length = temp.length();
                    if (length > 0) {
                        if (GeneralHelper.isStrIPAddress(temp)) {
                            if ((!temp.startsWith("172.")) && (!temp.startsWith("192.")) && (!temp.startsWith("10."))) {
                                return temp;
                            }
                        } else {
                            log.error(new StringBuilder("=====getIpAddr:error===== ip>>>").append(temp).toString());
                        }
                    }
                }
                return "";
            }
        }
    }

    /**
     * @return 本机有外网IP则返回外网IP，否则返回本地IP
     * @throws SocketException
     */
    private final static String getRealIp() throws SocketException {
        String localip = null;// 本地IP，如果没有配置外网IP则返回它
        String netip = null;// 外网IP

        Enumeration<NetworkInterface> netInterfaces = NetworkInterface.getNetworkInterfaces();
        InetAddress ip = null;
        boolean finded = false;// 是否找到外网IP
        while (netInterfaces.hasMoreElements() && !finded) {
            NetworkInterface ni = netInterfaces.nextElement();
            Enumeration<InetAddress> address = ni.getInetAddresses();
            while (address.hasMoreElements()) {
                ip = address.nextElement();
                if (!ip.isSiteLocalAddress() && !ip.isLoopbackAddress() && ip.getHostAddress().indexOf(":") == -1) {// 外网IP
                    netip = ip.getHostAddress();
                    finded = true;
                    break;
                } else if (ip.isSiteLocalAddress() && !ip.isLoopbackAddress() && ip.getHostAddress().indexOf(":") == -1) {// 内网IP
                    localip = ip.getHostAddress();
                }
            }
        }

        if (netip != null && !"".equals(netip)) {
            return netip;
        } else {
            return localip;
        }
    }
}