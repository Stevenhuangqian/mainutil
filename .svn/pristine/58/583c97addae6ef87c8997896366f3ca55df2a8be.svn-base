package com.efun.mainland.util.redis;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;

import redis.clients.jedis.ShardedJedis;

/**
 * redis客户端一致性哈希集群配置下常用的功能操作方法
 * 
 * @author Administrator
 * 
 */
public class RedisUtil {
	
	private RedisUtil() {
	}

	private static final IRedisService redisService = new RedisService();

	public static ShardedJedis getRedis() {
		return Redis.getRedis();
	}

	public static void releaseRedis(ShardedJedis redis, boolean isBroken) {
		Redis.releaseRedis(redis, isBroken);
	}

	public static Long append(byte[] key, byte[] value) {
		return redisService.append(key, value);
	}

	public static Long append(String key, String value) {
		return redisService.append(key, value);
	}

	public static Long bitcount(byte[] key) {
		return redisService.bitcount(key);
	}

	public static Long bitcount(String key) {
		return redisService.bitcount(key);
	}

	public static Long bitcount(byte[] key, long start, long end) {
		return redisService.bitcount(key, start, end);
	}

	public static Long bitcount(String key, long start, long end) {
		return redisService.bitcount(key, start, end);
	}

	public static Long del(byte[] key) {
		return redisService.del(key);
	}

	// /**
	// * ShardedJedis中不支持
	// * @param key
	// * @return
	// */
	// public static Long del(byte[]... key) {
	// return redisService.del(key);
	// }

	public static Long del(String key) {
		return redisService.del(key);
	}

	// /**
	// * ShardedJedis中不支持
	// * @param key
	// * @return
	// */
	// public static Long del(String... key) {
	// return redisService.del(key);
	// }

	public static Boolean exists(byte[] key) {
		return redisService.exists(key);
	}

	public static Boolean exists(String key) {
		return redisService.exists(key);
	}

	public static Long expire(byte[] key, int seconds) {
		return redisService.expire(key, seconds);
	}

	public static Long expire(String key, int seconds) {
		return redisService.expire(key, seconds);
	}

	public static Long expireAt(byte[] key, long unixTime) {
		return redisService.expireAt(key, unixTime);
	}

	public static Long expireAt(String key, long unixTime) {
		return redisService.expireAt(key, unixTime);
	}

	public static byte[] get(byte[] key) {
		return redisService.get(key);
	}

	public static String get(String key) {
		return redisService.get(key);
	}

	public static byte[] getSet(byte[] key, byte[] value) {
		return redisService.getSet(key, value);
	}

	public static String getSet(String key, String value) {
		return redisService.getSet(key, value);
	}

	public static Long hdel(byte[] key, byte[]... fields) {
		return redisService.hdel(key, fields);
	}

	public static Long hdel(String key, String... fields) {
		return redisService.hdel(key, fields);
	}

	public static Boolean hexists(byte[] key, byte[] field) {
		return redisService.hexists(key, field);
	}

	public static Boolean hexists(String key, String field) {
		return redisService.hexists(key, field);
	}

	public static byte[] hget(byte[] key, byte[] field) {
		return redisService.hget(key, field);
	}

	public static String hget(String key, String field) {
		return redisService.hget(key, field);
	}

	public static Map<byte[], byte[]> hgetAll(byte[] key) {
		return redisService.hgetAll(key);
	}

	public static Map<String, String> hgetAll(String key) {
		return redisService.hgetAll(key);
	}

	public static Set<byte[]> hkeys(byte[] key) {
		return redisService.hkeys(key);
	}

	public static Set<String> hkeys(String key) {
		return redisService.hkeys(key);
	}

	public static Long hlen(byte[] key) {
		return redisService.hlen(key);
	}

	public static Long hlen(String key) {
		return redisService.hlen(key);
	}

	public static List<byte[]> hmget(byte[] key, byte[]... fields) {
		return redisService.hmget(key, fields);
	}

	public static List<String> hmget(String key, String... fields) {
		return redisService.hmget(key, fields);
	}

	public static String hmset(byte[] key, Map<byte[], byte[]> hash) {
		return redisService.hmset(key, hash);
	}

	public static String hmset(String key, Map<String, String> hash) {
		return redisService.hmset(key, hash);
	}

	public static Long hset(byte[] key, byte[] field, byte[] value) {
		return redisService.hset(key, field, value);
	}

	public static Long hset(String key, String field, String value) {
		return redisService.hset(key, field, value);
	}

	public static Long hsetnx(byte[] key, byte[] field, byte[] value) {
		return redisService.hsetnx(key, field, value);
	}

	public static Long hsetnx(String key, String field, String value) {
		return redisService.hsetnx(key, field, value);
	}

	public static Collection<byte[]> hvals(byte[] key) {
		return redisService.hvals(key);
	}

	public static List<String> hvals(String key) {
		return redisService.hvals(key);
	}

	// //ShardedJedis中不支持
	// public static Set<byte[]> keys(byte[] pattern) {
	// return redisService.keys(pattern);
	// }
	// ShardedJedis中不支持
	// public static Set<String> keys(String pattern) {
	// return redisService.keys(pattern);
	// }

	public static byte[] lindex(byte[] key, long index) {
		return redisService.lindex(key, index);
	}

	public static String lindex(String key, long index) {
		return redisService.lindex(key, index);
	}

	public static Long llen(byte[] key) {
		return redisService.llen(key);
	}

	public static Long llen(String key) {
		return redisService.llen(key);
	}

	public static byte[] lpop(byte[] key) {
		return redisService.lpop(key);
	}

	public static String lpop(String key) {
		return redisService.lpop(key);
	}

	public static Long lpush(byte[] key, byte[]... strings) {
		return redisService.lpush(key, strings);
	}

	public static Long lpush(String key, String... strings) {
		return redisService.lpush(key, strings);
	}

	public static Long lpushx(byte[] key, byte[]... strings) {
		return redisService.lpushx(key, strings);
	}

	public static Long lpushx(String key, String... strings) {
		return redisService.lpushx(key, strings);
	}

	public static List<byte[]> lrange(byte[] key, long start, long end) {
		return redisService.lrange(key, start, end);
	}

	public static List<String> lrange(String key, long start, long end) {
		return redisService.lrange(key, start, end);
	}

	public static Long lrem(byte[] key, long count, byte[] value) {
		return redisService.lrem(key, count, value);
	}

	public static Long lrem(String key, long count, String value) {
		return redisService.lrem(key, count, value);
	}

	public static String lset(byte[] key, long index, byte[] value) {
		return redisService.lset(key, index, value);
	}

	public static String lset(String key, long index, String value) {
		return redisService.lset(key, index, value);
	}

	public static String ltrim(byte[] key, long start, long end) {
		return redisService.ltrim(key, start, end);
	}

	public static String ltrim(String key, long start, long end) {
		return redisService.ltrim(key, start, end);
	}

	// //ShardedJedis中不支持
	// public static List<byte[]> mget(byte[]... keys) {
	// return redisService.mget(keys);
	// }
	// //ShardedJedis中不支持
	// public static List<String> mget(String... keys) {
	// return redisService.mget(keys);
	// }
	// //ShardedJedis中不支持
	// public static Long persist(byte[] key) {
	// return redisService.persist(key);
	// }
	// //ShardedJedis中不支持
	// public static Long persist(String key) {
	// return redisService.persist(key);
	// }
	// //ShardedJedis中不支持
	// public static Long pexpire(byte[] key, long milliseconds) {
	// return redisService.pexpire(key, milliseconds);
	// }
	// //ShardedJedis中不支持
	// public static Long pexpire(String key, long milliseconds) {
	// return redisService.pexpire(key, milliseconds);
	// }
	// //ShardedJedis中不支持
	// public static Long pexpireAt(byte[] key, long milliseconds) {
	// return redisService.pexpireAt(key, milliseconds);
	// }
	// //ShardedJedis中不支持
	// public static Long pexpireAt(String key, long milliseconds) {
	// return redisService.pexpireAt(key, milliseconds);
	// }
	// //ShardedJedis中不支持
	// public static String rename(byte[] oldkey, byte[] newkey) {
	// return redisService.rename(oldkey, newkey);
	// }
	// //ShardedJedis中不支持
	// public static String rename(String oldkey, String newkey) {
	// return redisService.rename(oldkey, newkey);
	// }
	// //ShardedJedis中不支持
	// public static Long renamenx(byte[] oldkey, byte[] newkey) {
	// return redisService.renamenx(oldkey, newkey);
	// }
	// //ShardedJedis中不支持
	// public static Long renamenx(String oldkey, String newkey) {
	// return redisService.renamenx(oldkey, newkey);
	// }

	public static byte[] rpop(byte[] key) {
		return redisService.rpop(key);
	}

	public static String rpop(String key) {
		return redisService.rpop(key);
	}

	// //ShardedJedis中不支持
	// public static byte[] rpoplpush(byte[] srckey, byte[] dstkey) {
	// return redisService.rpoplpush(srckey, dstkey);
	// }
	// //ShardedJedis中不支持
	// public static String rpoplpush(String srckey, String dstkey) {
	// return redisService.rpoplpush(srckey, dstkey);
	// }

	public static Long rpush(byte[] key, byte[]... strings) {
		return redisService.rpush(key, strings);
	}

	public static Long rpush(String key, String... strings) {
		return redisService.rpush(key, strings);
	}

	public static Long rpushx(byte[] key, byte[]... strings) {
		return redisService.rpushx(key, strings);
	}

	public static Long rpushx(String key, String... strings) {
		return redisService.rpushx(key, strings);
	}

	public static Long sadd(byte[] key, byte[]... members) {
		return redisService.sadd(key, members);
	}

	public static Long sadd(String key, String... members) {
		return redisService.sadd(key, members);
	}

	public static Long scard(byte[] key) {
		return redisService.scard(key);
	}

	public static Long scard(String key) {
		return redisService.scard(key);
	}

	public static String set(byte[] key, byte[] value) {
		return redisService.set(key, value);
	}

	public static String set(String key, String value) {
		return redisService.set(key, value);
	}

	public static Long setnx(byte[] key, byte[] value) {
		return redisService.setnx(key, value);
	}

	public static Long setnx(String key, String value) {
		return redisService.setnx(key, value);
	}

	public static String setex(byte[] key, int seconds, byte[] value) {
		return redisService.setex(key, seconds, value);
	}

	public static String setex(String key, int seconds, String value) {
		return redisService.setex(key, seconds, value);
	}

	public static Boolean sismember(byte[] key, byte[] member) {
		return redisService.sismember(key, member);
	}

	public static Boolean sismember(String key, String member) {
		return redisService.sismember(key, member);
	}

	public static Set<byte[]> smembers(byte[] key) {
		return redisService.smembers(key);
	}

	public static Set<String> smembers(String key) {
		return redisService.smembers(key);
	}

	public static byte[] spop(byte[] key) {
		return redisService.spop(key);
	}

	public static String spop(String key) {
		return redisService.spop(key);
	}

	public static Long srem(byte[] key, byte[]... members) {
		return redisService.srem(key, members);
	}

	public static Long srem(String key, String... members) {
		return redisService.srem(key, members);
	}

	// //ShardedJedis中不支持
	// public static Set<byte[]> sunion(byte[]... key) {
	// return redisService.sunion(key);
	// }
	// //ShardedJedis中不支持
	// public static Set<String> sunion(String... key) {
	// return redisService.sunion(key);
	// }

	public static Long zadd(byte[] key, Map<byte[], Double> scoreMembers) {
		return redisService.zadd(key, scoreMembers);
	}

	public static Long zadd(String key, Map<String, Double> scoreMembers) {
		return redisService.zadd(key, scoreMembers);
	}

	public static Long zadd(byte[] key, double score, byte[] member) {
		return redisService.zadd(key, score, member);
	}

	public static Long zadd(String key, double score, String member) {
		return redisService.zadd(key, score, member);
	}

	public static Long zcard(byte[] key) {
		return redisService.zcard(key);
	}

	public static Long zcard(String key) {
		return redisService.zcard(key);
	}

	public static Set<byte[]> zrange(byte[] key, long start, long end) {
		return redisService.zrange(key, start, end);
	}

	public static Set<String> zrange(String key, long start, long end) {
		return redisService.zrange(key, start, end);
	}

	public static Long zrank(byte[] key, byte[] member) {
		return redisService.zrank(key, member);
	}

	public static Long zrank(String key, String member) {
		return redisService.zrank(key, member);
	}

	public static Long zrem(byte[] key, byte[]... members) {
		return redisService.zrem(key, members);
	}

	public static Long zrem(String key, String... members) {
		return redisService.zrem(key, members);
	}

	public static Double zscore(byte[] key, byte[] member) {
		return redisService.zscore(key, member);
	}

	public static Double zscore(String key, String member) {
		return redisService.zscore(key, member);
	}

	public static Long ttl(String key) {
		return redisService.ttl(key);
	}

	public static Long ttl(byte[] key) {
		return redisService.ttl(key);
	}

	// //ShardedJedis中不支持
	// public static Long pttl(String key){
	// return redisService.pttl(key);
	// }
	// //ShardedJedis中不支持
	// public static Long pttl(byte[] key){
	// return redisService.pttl(key);
	// }

	public static String type(String key) {
		return redisService.type(key);
	}

	public static String type(byte[] key) {
		return redisService.type(key);
	}

	public static Long decr(String key) {
		return redisService.decr(key);
	}

	public static Long decr(byte[] key) {
		return redisService.decr(key);
	}

	public static Long decrBy(String key, long value) {
		return redisService.decrBy(key, value);
	}

	public static Long decrBy(byte[] key, long value) {
		return redisService.decrBy(key, value);
	}

	public static Long incr(String key) {
		return redisService.incr(key);
	}

	public static Long incr(byte[] key) {
		return redisService.incr(key);
	}

	public static Long incrBy(String key, long value) {
		return redisService.incrBy(key, value);
	}

	public static Long incrBy(byte[] key, long value) {
		return redisService.incrBy(key, value);
	}

	public static Double incrByFloat(String key, double value) {
		return redisService.incrByFloat(key, value);
	}

	public static Double incrByFloat(byte[] key, double value) {
		return redisService.incrByFloat(key, value);
	}

	public static Long hincrBy(String key, String field, long value) {
		return redisService.hincrBy(key, field, value);
	}

	public static Long hincrBy(byte[] key, byte[] field, long value) {
		return redisService.hincrBy(key, field, value);
	}

	public static Double hincrByFloat(String key, String field, double value) {
		return redisService.hincrByFloat(key, field, value);
	}

	public static Double hincrByFloat(byte[] key, byte[] field, double value) {
		return redisService.hincrByFloat(key, field, value);
	}

}
